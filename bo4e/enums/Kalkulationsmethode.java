package com.example.bo4e.enums;

import java.io.IOException;

/**
 * Auflistung der verschiedenen Berechnungsmethoden f√ºr ein Preisblatt.
 */
public enum Kalkulationsmethode {
    AP_GP_ZONEN, AP_TRANSPORT_ODER_VERTEILNETZ, AP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID, BLINDARBEIT_GT_40__PROZENT, BLINDARBEIT_GT_50__PROZENT, BLINDARBEIT_MIT_FREIMENGE, FUNKTIONEN, LP_INSTALL_LEISTUNG, LP_JAHRESVERBRAUCH, LP_TRANSPORT_ODER_VERTEILNETZ, LP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID, SIGMOID, STUFEN, VERBRAUCH_UEBER_SLP_GRENZE_FUNKTIONSBEZOGEN_WEITERE_BERECHNUNG_ALS_LGK, VORZONEN_GP, ZONEN;

    public String toValue() {
        switch (this) {
            case AP_GP_ZONEN: return "AP_GP_ZONEN";
            case AP_TRANSPORT_ODER_VERTEILNETZ: return "AP_TRANSPORT_ODER_VERTEILNETZ";
            case AP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID: return "AP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID";
            case BLINDARBEIT_GT_40__PROZENT: return "BLINDARBEIT_GT_40_PROZENT";
            case BLINDARBEIT_GT_50__PROZENT: return "BLINDARBEIT_GT_50_PROZENT";
            case BLINDARBEIT_MIT_FREIMENGE: return "BLINDARBEIT_MIT_FREIMENGE";
            case FUNKTIONEN: return "FUNKTIONEN";
            case LP_INSTALL_LEISTUNG: return "LP_INSTALL_LEISTUNG";
            case LP_JAHRESVERBRAUCH: return "LP_JAHRESVERBRAUCH";
            case LP_TRANSPORT_ODER_VERTEILNETZ: return "LP_TRANSPORT_ODER_VERTEILNETZ";
            case LP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID: return "LP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID";
            case SIGMOID: return "SIGMOID";
            case STUFEN: return "STUFEN";
            case VERBRAUCH_UEBER_SLP_GRENZE_FUNKTIONSBEZOGEN_WEITERE_BERECHNUNG_ALS_LGK: return "VERBRAUCH_UEBER_SLP_GRENZE_FUNKTIONSBEZOGEN_WEITERE_BERECHNUNG_ALS_LGK";
            case VORZONEN_GP: return "VORZONEN_GP";
            case ZONEN: return "ZONEN";
        }
        return null;
    }

    public static Kalkulationsmethode forValue(String value) throws IOException {
        if (value.equals("AP_GP_ZONEN")) return AP_GP_ZONEN;
        if (value.equals("AP_TRANSPORT_ODER_VERTEILNETZ")) return AP_TRANSPORT_ODER_VERTEILNETZ;
        if (value.equals("AP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID")) return AP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID;
        if (value.equals("BLINDARBEIT_GT_40_PROZENT")) return BLINDARBEIT_GT_40__PROZENT;
        if (value.equals("BLINDARBEIT_GT_50_PROZENT")) return BLINDARBEIT_GT_50__PROZENT;
        if (value.equals("BLINDARBEIT_MIT_FREIMENGE")) return BLINDARBEIT_MIT_FREIMENGE;
        if (value.equals("FUNKTIONEN")) return FUNKTIONEN;
        if (value.equals("LP_INSTALL_LEISTUNG")) return LP_INSTALL_LEISTUNG;
        if (value.equals("LP_JAHRESVERBRAUCH")) return LP_JAHRESVERBRAUCH;
        if (value.equals("LP_TRANSPORT_ODER_VERTEILNETZ")) return LP_TRANSPORT_ODER_VERTEILNETZ;
        if (value.equals("LP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID")) return LP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID;
        if (value.equals("SIGMOID")) return SIGMOID;
        if (value.equals("STUFEN")) return STUFEN;
        if (value.equals("VERBRAUCH_UEBER_SLP_GRENZE_FUNKTIONSBEZOGEN_WEITERE_BERECHNUNG_ALS_LGK")) return VERBRAUCH_UEBER_SLP_GRENZE_FUNKTIONSBEZOGEN_WEITERE_BERECHNUNG_ALS_LGK;
        if (value.equals("VORZONEN_GP")) return VORZONEN_GP;
        if (value.equals("ZONEN")) return ZONEN;
        throw new IOException("Cannot deserialize Kalkulationsmethode");
    }
}
